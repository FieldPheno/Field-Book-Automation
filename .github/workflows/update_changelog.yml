name: Update Changelog

on:
  push:
    branches:
      - main

jobs:
  update-changelog:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.ACTIONS_PAT }}  # Use GitHub Personal Access Token for `gh` CLI

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTIONS_PAT }}
          fetch-depth: 0  # Ensure the entire repo is fetched, including all branches

      - name: Extract changelog entry from merged PR
        id: extract_changelog
        run: |
          set -e  # Ensure the script exits on errors

          # Get the latest commit SHA that triggered the push event
          commit_sha=$(git log -1 --format="%H")
          echo "Commit SHA: $commit_sha"
          
          # Use the GitHub API to find the pull request associated with the commit SHA
          pr_number=$(gh api -X GET "repos/${{ github.repository }}/commits/$commit_sha/pulls" --jq '.[0].number')

          # Graceful exit if no PR is found for the commit
          if [ -z "$pr_number" ]; then
            echo "No associated PR found for commit $commit_sha."
            exit 0
          fi
          echo "PR Number: $pr_number"

          # Retrieve the PR body using the GitHub API
          pr_body=$(gh api -X GET "repos/${{ github.repository }}/pulls/$pr_number" --jq '.body')

          # Print the cleaned PR body
          clean_pr_body=$(echo "$pr_body" | sed 's/\r//g')

          # Extract the release note content
          changelog_entry=$(echo "$clean_pr_body" | awk 'BEGIN { found=0 } /```release-note/ { found=1; next } /```/ { found=0 } found { print }')
          changelog_entry=$(echo "$changelog_entry" | sed '/^$/d' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Extract the type of change (CHANGE, FEATURE, BUGFIX, ENHANCEMENT, NONE)
          change_type=$(echo "$clean_pr_body" | grep -oP '(?<=- \[x\] `)\w+')

          # Ensure the section is properly set
          if [ -z "$change_type" ]; then
            echo "Could not determine the type of change from PR body."
            exit 1
          fi

          # Define the section based on the type of change
          case "$change_type" in
            "FEATURE"|"ENHANCEMENT")
              section="### Added"
              ;;
            "CHANGE")
              section="### Changed"
              ;;
            "BUGFIX")
              section="### Fixed"
              ;;
            "NONE")
              echo "No notable changelog entry needed."
              exit 0
              ;;
            *)
              echo "Unknown change type: $change_type"
              exit 1
              ;;
          esac

          # Add the PR number to the changelog entry
          changelog_entry="$changelog_entry (PR #$pr_number)"
          
          # Print the changelog entry and section for debugging
          echo "Changelog Entry: $changelog_entry"
          echo "Section: $section"

          # Exit if the changelog entry is empty
          if [ -z "$changelog_entry" ]; then
            echo "No changelog entry found in the PR body."
            exit 1
          fi

          # Store the changelog entry and section as environment variables
          echo "changelog=$changelog_entry" >> $GITHUB_ENV
          echo "section=$section" >> $GITHUB_ENV
          echo "pr_number=$pr_number" >> $GITHUB_ENV

      - name: Add note to unreleased section of CHANGELOG.md
        run: |
          # Add under the first occurrence of the correct subsection
          sed -i "0,/${{ env.section }}/s/${{ env.section }}/${{ env.section }}\n- ${{ env.changelog }}/" CHANGELOG.md

          cat CHANGELOG.md

      - name: Commit and push updated changelog
        uses: EndBug/add-and-commit@v7
        with:
          add: 'CHANGELOG.md'
          message: "Update CHANGELOG.md with note from PR #${{ env.pr_number }}"
          author_email: git-action-bot@example.com
          author_name: Git Action Bot
          token: ${{ secrets.GITHUB_TOKEN }}
          push: true